println '------gradle lifecycle lib build.gradle execute------'

apply plugin: 'com.android.library'

def config = rootProject.extensions.getByName("ext")

android {
    compileSdkVersion config["compile_sdk"]

    defaultConfig {
        minSdkVersion config["min_sdk"]
        targetSdkVersion config["target_sdk"]
        versionCode 1
        versionName "1.0"

        testInstrumentationRunner config["test_runner"]
    }

    buildTypes {
        release {
            minifyEnabled false
            proguardFiles getDefaultProguardFile('proguard-android.txt'), 'proguard-rules.pro'
        }
    }

}

dependencies {

    //api 可以被外部库使用， implementation只能本库使用
    api fileTree(dir: 'libs', include: ['*.jar'])

    def applicationDependencies = rootProject.ext.mainApplication
    def unitTestDependencies = rootProject.ext.unitTesting
    def acceptanceTestDependencies = rootProject.ext.acceptanceTesting
    def developmentDependencies = rootProject.ext.development

    //使用api 供外部引用该库的模块使用 implementation只能本模块使用
    api applicationDependencies.appCompat
    api applicationDependencies.constraintLayout

    api applicationDependencies.material
    api applicationDependencies.legacy
    api applicationDependencies.cardview
    api applicationDependencies.gson
    api applicationDependencies.okhttpLoggingInterceptor
    api applicationDependencies.retrofit2
    api applicationDependencies.retrofit2Gson
    api applicationDependencies.retrofit2Adapter
    api applicationDependencies.retrofit2Xml
    api applicationDependencies.rxjava
    api applicationDependencies.rxandroid

    testImplementation unitTestDependencies.junit
}
