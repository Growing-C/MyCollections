// Top-level build file where you can add configuration options common to all sub-projects/modules.
println '------gradle lifecycle root build.gradle execute------'

//全局引入外部辅助gradle
apply from: 'projectbuild/ci.gradle'
//apply from: 'projectbuild/test.gradle'
apply from: 'projectbuild/dependencies.gradle'

println "gradle lifecycle all project size : ${allprojects.size()}"

//  buildscript主要用于声明gardle脚本自身所需要使用的资源，
// 包括依赖项、maven仓库地址、第三方插件等。你可以在里面手动添加一些三方插件、库的引用，
// 这样你就可以在脚本中使用它们了。因为是引用，所以gradle在执行脚本时，会优先执行buildscript代码块中的内容。

ext {
    compile_sdk = 30
    target_sdk = 30
    min_sdk = 21

//    androidx_version = '1.1.0'
//
//    java_version = JavaVersion.VERSION_1_8
//    roomVersion = '2.2.2'
}

buildscript {
    //ext.xx 和ext{}等效
    ext.test_runner = 'androidx.test.runner.AndroidJUnitRunner'

    ext {
        kotlin_version = '+'
//        kotlin_version = '1.3.50'
        nav_version = "2.1.0"
    }

    repositories {
//        Maven Central 和JCenter是两个有名的远程仓库，一般不同时使用它们，
//        通常推荐使用JCenter，它是Maven Central的超集，其也是Android Studio创建Android项目时的默认依赖仓库，而且JCenter还支持HTTPS。

//        mavenLocal,本地Maven仓库是你已经使用了的所有依赖的本地缓存，你也可以自己添加依赖。
//        默认情况下，依赖仓库可以在一个名为.m2目录文件夹的主目录中找到。在Linux或Mac OS X上，该路径是~/.m2，
//        在Windows上路径是%UserProfile%/.m2。

//        maven {
//            url 'https://dl.bintray.com/kotlin/kotlin-dev/'
//        }
//        mavenCentral()
        mavenLocal()

        jcenter()
        google()
    }
    dependencies {
        classpath 'com.android.tools.build:gradle:4.1.1'

        // NOTE: Do not place your application dependencies here; they belong
        // in the individual module build.gradle files
        classpath "org.jetbrains.kotlin:kotlin-gradle-plugin:$kotlin_version"
        classpath "androidx.navigation:navigation-safe-args-gradle-plugin:$nav_version"
    }
}

//allprojects块的repositories用于多项目构建，为所有项目提供共同所需依赖包。
allprojects {
    repositories {
//        maven {
//            url 'https://dl.bintray.com/kotlin/kotlin-dev/'
//        }
//
//        mavenCentral()
        mavenLocal()
        jcenter()
        google()
//
//        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
//        //MPandroid chart要求，www必须有 不然一直报错
        maven { url 'https://www.jitpack.io' }

        //---------------wallet repo------------------------------
//        mavenCentral()
//        maven {
//            url 'https://maven.google.com/'
//            name 'Google'
//        }
//        google()
//        jcenter()
//        maven { url 'http://maven.aliyun.com/nexus/content/groups/public/' }
//        jcenter() { url 'http://jcenter.bintray.com/' }//原来是https 如果jcenter() 这样下不下来就改成http
//        maven { url "http://192.168.2.94:10080/repertory/maven/dependency/raw/master/" }
//        maven { url 'https://jitpack.io' }
//        maven { url 'https://mobile-sdk.jumio.com' }
//
//        maven { url "http://192.168.2.94:8081/repository/maven-public/" }
    }
}

task clean(type: Delete) {
    delete rootProject.buildDir
}

task runUnitTests(dependsOn: [':app:testDebugUnitTest']) {
    description 'Run all unit tests'
}

task runAcceptanceTests(dependsOn: [':app:connectedAndroidTest']) {
    description 'Run all acceptance tests.'
}

task deployDebug(type: Exec, dependsOn: 'app:installDebug') {
    def rootDir = project.rootDir
    def localProperties = new File(rootDir, "local.properties")
    if (localProperties.exists()) {
        Properties properties = new Properties()
        localProperties.withInputStream {
            inputStream -> properties.load(inputStream)
        }
        def sdkDir = properties.getProperty('sdk.dir')
        def adb = "$sdkDir/platform-tools/adb"
        commandLine "$adb", 'shell', 'am', 'start', '-n', 'com.fernandocejas.sample/com.fernandocejas.sample.core.navigation.RouteActivity'
    }
}
//测试一些系统api参数等内容
task aaTestSysArguments() {
    println('ccc testSysArguments start!')//此处会在build最开始的时候执行
    doLast {//此处会在build最后的时候执行
        println('ccc testSysArguments dolast!')
        //ccc root dir:F:\myprojects\MyCollections\MyCollection
        println('ccc root dir:' + project.rootDir)
        //单引号无法使用 $rootDir，使用双引号可以直接引用到
        //"$rootDir" 等效于 project.rootDir
        println('ccc root dir:' + "$rootDir")
        //获取系统环境变量 C:\Users\Xpeng\AppData\Local\Android\Sdk\platform-tools;C:\Users\Xpeng\AppData\Local\Android\Sdk\tools
        println("system android:" + System.getenv("androidtools"))
        //获取系统环境变量，不过新建的环境变量需要重启ide才能获取到
        println("system xp:" + System.getenv("XP_BUILD_CONFIG"))
    }
}

//---------------测试生命周期的task--------------------------------
gradle.settingsEvaluated { settings ->
    println "gradle lifecycle settingsEvaluated"
}

gradle.projectsLoaded { gradle ->
    println "gradle lifecycle projectsLoaded"
}

gradle.beforeProject { project ->
    println "gradle lifecycle beforeProject: ${project.name} "
}

gradle.afterProject { project ->
    println "gradle lifecycle afterProject: ${project.name}"
}

gradle.projectsEvaluated { gradle ->
    println "gradle lifecycle projectsEvaluated"
}

//执行一个task的build完成最后会走这里
gradle.buildFinished { buildResult ->
    println "gradle lifecycle buildFinished"
}

gradle.taskGraph.whenReady { graph ->
    println "============gradle lifecycle task graph is ready============"
    //所有task运行do last前都会走这里
    graph.getAllTasks().each {
        println "gradle lifecycle task ${it.name} will execute"
    }
    println "============gradle lifecycle task graph is over============="
}

//所有task正要运行do last前都会走这里
gradle.taskGraph.beforeTask { task ->
    println "gradle lifecycle before ${task.name} execute"
}
//所有task do last 执行完了之后都会走这里
gradle.taskGraph.afterTask { task ->
    println "gradle lifecycle after ${task.name} execute"
}

//任务添加时会走这里，不过必须是写在这个之后的 如subTask1,之前的不会走
tasks.whenTaskAdded { task ->
    println "gradle lifecycle taskAdded:" + task.name
}

task subTask1 {
    group "hello"
    doLast {
        println "gradle lifecycle ${name} execute"
    }
}

//可以运行这个task来观察gradle执行的生命周期
task subTask2(dependsOn: 'subTask1') {
    group "hello"
    doLast {
        println "gradle lifecycle ${name} execute"
    }
}